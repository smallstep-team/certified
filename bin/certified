#!/bin/sh

#/ Usage: certified [--bits=<bits>] [--ca] [--ca-password=<ca-password>] [--combined-cert-file=<file>] [--days=<days>] [--db=<db>] [--encrypt] [--issuer=<issuer>] [--issuer-name=<issuer-name>] [--name=<name>] [--no-sign] [--password=<password>] [--revoke] [--self-signed] [C=<country>] [ST=<state>] [L=<locality>] [O=<organization>] CN=<common-name> [+<dns>[...]] [+<ip>[...]]
#/   --bits=<bits>               bits to use for the private key (defaults to 2048)
#/   --ca                        generate a CA certificate
#/   --ca-password=<ca-password> password for the CA private key
#/   --combined-cert-file=<file> out file for combination of server and intermediate certs
#/   --days=<days>               days until the certificate expires (defaults to 365)
#/   --db=<db>                   OpenSSL database directory
#/   --encrypt                   encrypt the private key (with <password>, if given)
#/   --issuer=<issuer>           common name of an alternative CA certificate
#/   --issuer-name=<issuer-name> filename of the alternative CA certificate (default derived from the alternative CA common name)
#/   --name=<name>               filename to use (default derived from the certificate common name)
#/   --no-sign                   do not sign the certificate; stop with a certificate signing request
#/   --password=<password>       password for the private key (implies --encrypt)
#/   --revoke                    revoke an existing certificate
#/   --self-signed               generate a self-signed certificate instead of using the CA
#/   C=<country>                 certificate country (defaults to the CA country)
#/   ST=<state>                  certificate state (defaults to the CA state)
#/   L=<locality>                certificate locality (usually a city; defaults to the CA locality)
#/   O=<organization>            certificate organization (usually a company; defaults to the CA organization)
#/   OU=<org-unit>               certificate organizational unit (usually a department or group; defaults to the CA organizational unit)
#/   CN=<common-name>            certificate common name (usually a domain name)
#/   +<dns>                      add a DNS name to the certificate's subject alternative names
#/   +<ip>                       add an IP address to the certificate's subject alternative names

set -e

. "$(dirname "$(dirname "$0")")/lib/certified.sh"

SAN=""
while [ "$#" -gt 0 ]
do
    case "$1" in
        --bits) BITS="$2" shift 2;;
        --bits=*) BITS="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --ca) CA="--ca" shift;;
        --ca-password) CA_PASSWORD="$2" shift 2;;
        --ca-password=*) CA_PASSWORD="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --combined-cert-file) COMBINED_CERT="$2" shift 2;;
        --combined-cert-file=*) COMBINED_CERT="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --days) DAYS="$2" shift 2;;
        --days=*) DAYS="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --db) DB="$2" shift 2;;
        --db=*) DB="$(echo "$1" | cut -c"6-")" shift;;
        --encrypt) ENCRYPT="--encrypt" shift;;
        --issuer) ISSUER="$2" shift 2;;
        --issuer=*) ISSUER="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --issuer-name) ISSUER_NAME="$2" shift 2;;
        --issuer-name=*) ISSUER_NAME="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --name) NAME="$2" shift 2;;
        --name=*) NAME="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --no-sign) NO_SIGN="--no-sign" shift;;
        --password) PASSWORD="$2" shift 2;;
        --password=*) PASSWORD="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --revoke) REVOKE="--revoke" shift;;
        --self|--self-sign|--self-signed) SELF_SIGNED="--self-signed" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
        C=*) C="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        CN=*) CN="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        L=*) L="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        O=*) O="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        OU=*) OU="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        ST=*) ST="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        +*) SAN="$SAN $1" shift;;
		*) break;;
    esac
done
if [ -f "$DB/defaults.sh" ]
then . "$DB/defaults.sh"
fi
[ "$CN" ] || usage 1
: ${NAME:="$(echo "$CN" | tr "[:upper:]" "[:lower:]" | tr " " "-")"}
: ${ISSUER:="ca"}
: ${ISSUER_NAME:="$(echo "$ISSUER" | tr "[:upper:]" "[:lower:]" | tr " " "-")"}

mkdir -p "$DB"
cd "$DB"

if [ "$REVOKE" ]
then
    certified-revoke --ca-password="$CA_PASSWORD" --db="." --issuer="$ISSUER" --issuer-name="$ISSUER_NAME" --name="$NAME" CN="$CN"
    git rm -f -q "certs/$NAME.crt" "$NAME.cnf" "$NAME.csr" "private/$NAME.key"
    git add "."
    git commit -m"$MESSAGE" -q
    exit
fi

certified-csr --bits="$BITS" $CA --days="$DAYS" --db="." $ENCRYPT --issuer="$ISSUER" --issuer-name="$ISSUER_NAME" --name="$NAME" --password="$PASSWORD" C="$C" CN="$CN" L="$L" O="$O" OU="$OU" ST="$ST" $SAN

if [ -z "$NO_SIGN" ]
then certified-crt --days="$DAYS" --db="." --name="$NAME" --ca-password="$CA_PASSWORD" $SELF_SIGNED CN="$CN"
fi

git init -q
git add "."
git commit -m"$MESSAGE" -q

echo >&2
log "install this private key on your server"
cat "private/$NAME.key"
echo >&2
if [ "$NO_SIGN" ]
then
    log "relay this certificate signing request to your certificate vendor"
    cat "$NAME.csr"
else
    log "install this certificate chain on your server"
    cat "certs/$NAME.crt"
    cat "certs/$ISSUER_NAME.crt"

    if [ ! -z ${COMBINED_CERT} ]; then
        cp "certs/$NAME.crt" "${COMBINED_CERT}"
        cat "certs/$ISSUER_NAME.crt" | tee -a "${COMBINED_CERT}"
    fi
fi
